import requests

# GitHub API URL to list files in a commit tree

data_path = "reference-data/identifier-types"

GITHUB_API_URL = (
    "https://api.github.com/repos/folio-org/mod-inventory-storage/git/trees/"
    "a274ce0c885b9750c4676671094193887043fb3d?recursive=1"
)

# Base URL for raw content
RAW_BASE_URL = (
    f"https://raw.githubusercontent.com/folio-org/mod-inventory-storage/"
    f"a274ce0c885b9750c4676671094193887043fb3d/{data_path}"
)



def list_instance_format_files():
    response = requests.get(GITHUB_API_URL)
    response.raise_for_status()
    tree = response.json().get("tree", [])
    prefix = f"{data_path}/"
    # return [
    #     entry["path"][len(prefix) :]
    #     for entry in tree
    #     if entry["path"].startswith(prefix) and entry["path"].endswith(".json")
    # ]
    files = []
    for entry in tree:
        path = entry["path"]

        # Nur .json-Dateien im gew√ºnschten Verzeichnis
        if path.startswith(prefix) and path.endswith(".json"):
            # Entferne den Verzeichnisteil und behalte nur den Dateinamen
            filename = path[len(prefix) :]
            files.append(filename)
    return files


def fetch_mapping_entries(filenames):
    mappings = []
    for fname in filenames:
        url = f"{RAW_BASE_URL}/{fname}"
        resp = requests.get(url)
        if resp.status_code == 200:
            data = resp.json()
            fid = data.get("id")
            name = data.get("name")
            if fid and name:
                mappings.append((fid, name))
        else:
            print(f"Fehler beim Abrufen: {url}")
    return mappings


def generate_xsl_when_blocks(mappings):
    blocks = []
    for fid, name in mappings:
        block = f"""  <xsl:if test=".='{fid}'">
    <dc:format>{name}</dc:format>
  </xsl:if>"""
        blocks.append(block)
    return "\n".join(blocks)


if __name__ == "__main__":
    files = list_instance_format_files()
    mapping = fetch_mapping_entries(files)
    xsl_code = generate_xsl_when_blocks(mapping)

    
    with open(f"generated-mappings/{data_path}.xsl", "w", encoding="utf-8") as f:
        f.write("<!-- Auto-generated by Python script -->\n")
        f.write(xsl_code)

    print("XSL-Mapping erfolgreich generiert.")
